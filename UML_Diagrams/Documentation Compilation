HBnB Evolution: Technical Documentation

High-Level Architecture

The HBnB application is structured using a three-layer architecture, designed to separate concerns and enhance modularity. This section presents the high-level package diagram, illustrating the organization of the application‚Äôs components across the Presentation Layer, Business Logic Layer, and Persistence Layer, with communication facilitated by the facade pattern.



üìä Package Diagram

Below is the high-level package diagram created using Mermaid.js, showcasing the three layers, their key components, and their dependencies:




üìù Explanatory Notes

The package diagram represents the high-level structure of the HBnB application, a simplified AirBnB-like system. Each layer has distinct responsibilities, and the facade pattern is employed to streamline communication between them. Below is a detailed breakdown:

Presentation Layer





Purpose: Manages all user-facing interactions.



Components:





User Interface: The front-end (e.g., web or mobile interface) where users interact with the application.



API Endpoints: RESTful services that handle external requests and responses.



Presentation Facade: Acts as the unified interface to the Business Layer, managing cross-cutting concerns like security and load balancing.



Interactions: Users access the system via the User Interface, which communicates with API Endpoints. The Presentation Facade then routes requests to the Business Layer.

Business Logic Layer





Purpose: Encapsulates the core functionality and business rules of the application.



Components:





Models: Represent the entities such as User, Place, Review, and Amenity.



Services: Implement operations like user management, property listing, and review processing (e.g., UserService, PlaceService).



Interactions: Services depend on Models for data representation and communicate with the Persistence Layer via the Persistence Facade.

Persistence Layer





Purpose: Handles data storage, retrieval, and management.



Components:





Persistence Facade: Abstracts database operations, providing a simplified interface for the Business Layer.



Repositories: Manage specific data access logic for each entity.



DBMS Connection: Interfaces with the database management system.



Data Replication: Ensures data redundancy and availability.



Interactions: The Persistence Facade receives requests from the Business Layer, delegating them to Repositories, which interact with the DBMS Connection and Data Replication.

Facade Pattern





Role: Simplifies interlayer communication by providing a single entry point per layer.



Implementation:





The Presentation Facade connects the Presentation Layer to the Business Layer, routing requests to the appropriate Services.



The Persistence Facade abstracts data operations, allowing the Business Layer to perform CRUD (Create, Read, Update, Delete) tasks without direct database interaction.



Benefits: Enhances modularity, reduces coupling, and improves maintainability.



üõ† Design Decisions





Layered Architecture: Chosen to separate concerns, making the system scalable and easier to maintain.



Facade Pattern: Adopted to abstract complex interactions, ensuring each layer remains independent yet interoperable.



Component Placement: External users are shown outside the layers, emphasizing their role as actors interacting with the system via the Presentation Layer.

This high-level architecture provides a clear foundation for the HBnB application, guiding subsequent design and implementation phases.
